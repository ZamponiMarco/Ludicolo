
package rules

//list any import classes here.
import java.util.Comparator
import it.unicam.lcp.ludicolo.Utility
import it.unicam.lcp.ludicolo.Player
import it.unicam.lcp.ludicolo.pkmn.Stat
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.actions.moves.MoveType
import it.unicam.lcp.ludicolo.actions.ActionStatus
import it.unicam.lcp.ludicolo.pkmn.Pokemon
import it.unicam.lcp.ludicolo.pkmn.PokemonStatus
import it.unicam.lcp.ludicolo.actions.items.ItemAction
import it.unicam.lcp.ludicolo.actions.Action
import java.util.HashMap
import java.util.Map
import java.util.Random
import it.unicam.lcp.ludicolo.actions.moves.Move
import it.unicam.lcp.ludicolo.actions.moves.MoveType
import it.unicam.lcp.ludicolo.actions.moves.MoveEffectTarget
import it.unicam.lcp.ludicolo.actions.moves.StageMoveEffect
import it.unicam.lcp.ludicolo.actions.moves.StatusMoveEffect
import java.util.List
import java.util.Collections
import it.unicam.lcp.ludicolo.Type

rule "MoveActionAccuracyCheck"
    agenda-group "action fire"
    salience 2
when
    moveAction: MoveAction(moveAction.status == ActionStatus.READY_TO_FIRE)
    sourcePokemon : Pokemon(sourcePokemon.getOwner().equals(moveAction.getSource()))
then
    Utility.helper(drools);
    int accuracy = moveAction.getMove().getAccuracy();
    if(!Utility.probabilityCheck(accuracy)) {
        moveAction.setStatus(ActionStatus.DONE);
        System.out.println(sourcePokemon.getName() + " failed to throw its move");
        update(moveAction);
    } else {
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("move action fire").setFocus();
    }
end

// Modifier rules

rule "CalculateModifier"
    agenda-group "move action fire"
    salience 1
when
    moveAction: MoveAction(moveAction.status == ActionStatus.READY_TO_FIRE)
    sourcePokemon : Pokemon(sourcePokemon.getOwner().equals(moveAction.getSource()))
    targetPokemon : Pokemon(targetPokemon.getOwner().equals(moveAction.getTarget()))
then
    Utility.helper(drools);
    double critical = Math.random() < 1/24f ? 1.5 : 1;
    double random = Math.random() * .15 + .85;
    double stab = sourcePokemon.getType().stream().anyMatch(t1 -> t1.equals(moveAction.getMove().getType())) ? 1.5 : 1;
    double type = targetPokemon.getType().stream().reduce(1.0, (i, t2) ->
        i * Type.damageMatrix[moveAction.getMove().getType().ordinal()][t2.ordinal()], (n,m) -> n * m);
    double burn = sourcePokemon.getStatus() != null && sourcePokemon.getStatus().equals(PokemonStatus.BURNED) ? .5 : 1;
    double modifier = critical * random * stab * type * burn;
    System.out.printf("Modifiers: \n\tCRITICAL: %f\n\tRANDOM: %f\n\tSTAB: %f\n\tTYPE: %f\n\tBURN: %f\n\nFinal modifier: %f%n",
        critical, random, stab, type, burn, modifier);
    moveAction.setModifier(modifier);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "PhysicalMoveActionFire"
    agenda-group "move action fire"
    salience 0
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.PHYSICAL, moveAction.status == ActionStatus.READY_TO_FIRE)
    sourcePokemon : Pokemon(sourcePokemon.getOwner().equals(moveAction.getSource()))
    targetPokemon : Pokemon(targetPokemon.getOwner().equals(moveAction.getTarget()))
then
    Utility.helper(drools);

    Map<Stat, Integer> lifeStageStats = new HashMap<>();
    int targetLife = targetPokemon.getStageValue(Stat.LIFE);
    int dmg = Utility.calculateDamage(
            sourcePokemon.getLevel(),
            moveAction.getMove().getPower(),
            sourcePokemon.getBattleStatValueWithStage(Stat.ATTACK),
            targetPokemon.getBattleStatValueWithStage(Stat.DEFENSE),
            moveAction.getModifier());


    lifeStageStats.put(Stat.LIFE, Math.max((targetLife - dmg),0));
    System.out.println(sourcePokemon.getName() + " uses " + moveAction.getMove().name());
    System.out.println("DMG: " + dmg);

    targetPokemon.setStage(lifeStageStats);
    update(targetPokemon);

    sourcePokemon.reducePP(moveAction.getMove());
    update(sourcePokemon);

    moveAction.setStatus(ActionStatus.FIRED);
    update(moveAction);
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("move action effect").setFocus();
end

rule "SpecialMoveActionFire"
    agenda-group "move action fire"
    salience 0
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.SPECIAL, moveAction.status == ActionStatus.READY_TO_FIRE)
    sourcePokemon : Pokemon(sourcePokemon.getOwner().equals(moveAction.getSource()))
    targetPokemon : Pokemon(targetPokemon.getOwner().equals(moveAction.getTarget()))
then
    Utility.helper(drools);

    Map<Stat, Integer> lifeStageStats = new HashMap<>();
    int targetLife = targetPokemon.getStageValue(Stat.LIFE);
    int dmg = Utility.calculateDamage(
            sourcePokemon.getLevel(),
            moveAction.getMove().getPower(),
            sourcePokemon.getBattleStatValueWithStage(Stat.SPECIAL_ATTACK),
            targetPokemon.getBattleStatValueWithStage(Stat.SPECIAL_DEFENSE),
            moveAction.getModifier());
    System.out.println(sourcePokemon.getName() + " uses " + moveAction.getMove().name());
    System.out.println("DMG: "+dmg);
    lifeStageStats.put(Stat.LIFE, Math.max((targetLife - dmg),0));

    targetPokemon.setStage(lifeStageStats);
    update(targetPokemon);

    sourcePokemon.reducePP(moveAction.getMove());
    update(sourcePokemon);

    moveAction.setStatus(ActionStatus.FIRED);
    update(moveAction);
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("move action effect").setFocus();
end

rule "StatusMoveActionFire"
    agenda-group "move action fire"
    salience 0
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.STATUS, moveAction.status == ActionStatus.READY_TO_FIRE)
    sourcePokemon : Pokemon(sourcePokemon.getOwner().equals(moveAction.getSource()))
    targetPokemon : Pokemon(targetPokemon.getOwner().equals(moveAction.getTarget()))
then
    Utility.helper(drools);
    System.out.println(sourcePokemon.getName() + " uses " + moveAction.getMove().name());

    sourcePokemon.reducePP(moveAction.getMove());
    update(sourcePokemon);

    moveAction.setStatus(ActionStatus.FIRED);
    update(moveAction);
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("move action effect").setFocus();
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "StageEffect"
    agenda-group "move action effect"
    salience 1
when
    moveAction : MoveAction(moveAction.status == ActionStatus.FIRED, !moveAction.stageEffectDone, moveAction.move.containsStageMoveEffect())
    sourcePokemon : Pokemon(sourcePokemon.getOwner().equals(moveAction.getSource()))
    targetPokemon : Pokemon(targetPokemon.getOwner().equals(moveAction.getTarget()))
then
    Utility.helper(drools);
    moveAction.getMove().getStageMoveEffects().forEach(stageSideEffect -> {
        MoveEffectTarget target = stageSideEffect.getTarget();
        Stat stat = stageSideEffect.getTargetStat();
        if (target.equals(MoveEffectTarget.TARGET)) {
            targetPokemon.setStage(Collections.singletonMap(stat,
                targetPokemon.getStageValue(stat) + stageSideEffect.getNumberOfStages()));
        } else {
            sourcePokemon.setStage(Collections.singletonMap(stat,
                sourcePokemon.getStageValue(stat) + stageSideEffect.getNumberOfStages()));
        }
    });
    moveAction.setStageEffectDone(true);
    update(moveAction);
    update(targetPokemon);
    update(sourcePokemon);
end;

rule "StatusEffect"
    agenda-group "move action effect"
    salience 1
when
    moveAction : MoveAction(moveAction.status == ActionStatus.FIRED, !moveAction.statusEffectDone, moveAction.move.containsStatusMoveEffect())
    sourcePokemon : Pokemon(sourcePokemon.getOwner().equals(moveAction.getSource()))
    targetPokemon : Pokemon(targetPokemon.getOwner().equals(moveAction.getTarget()))
then
    Utility.helper(drools);
    moveAction.getMove().getStatusMoveEffects().forEach(effect -> {
        if(Utility.probabilityCheck(effect.getChance())){
            Pokemon target = effect.getTarget() == MoveEffectTarget.SOURCE ? sourcePokemon : effect.getTarget() == MoveEffectTarget.TARGET ? targetPokemon : null;
            if(target.getStatus() == null){
                        switch (effect.getStatus()){
                            case PARALYZED:
                                Map<Stat, Integer> battleStats = new HashMap<>();
                                battleStats.put(Stat.SPEED, target.getBattleStatValue(Stat.SPEED)/2);
                                target.setBattleStat(battleStats);
                            case BURNED:
                            case FROZEN:
                            case POISONED:
                            case ASLEEP:
                            case CONFUSED:
                                target.setStatus(effect.getStatus());
                                target.setStatusDuration(effect.isRandom() ? new Random().nextInt(effect.getDuration()) + 1 : effect.getDuration());

                                System.out.println(target.getName() + " has now a condition: " + target.getStatus() + " for " + target.getStatusDuration() + " turns");
                                break;
                            case PROTECTED:
                                target.setProtectedFromAttacks(true);
                                System.out.println(target.getName() + " has now protection from attacks.");
                                break;
                        }
                update(target);
            } else {
                System.out.println(target.getName() + " has already a condition: " + target.getStatus());
            }
        }
    });
    moveAction.setStatusEffectDone(true);
    update(moveAction);
end

rule "MoveEnding"
    agenda-group "move action fire"
    salience -1
when
    moveAction : MoveAction(moveAction.status == ActionStatus.FIRED)
then
    Utility.helper(drools);
    moveAction.setStatus(ActionStatus.DONE);
    update(moveAction);
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("winning conditions").setFocus();
 end
