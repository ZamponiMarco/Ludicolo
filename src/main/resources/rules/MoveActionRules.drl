
package rules

//list any import classes here.
import java.util.Comparator
import it.unicam.lcp.ludicolo.*
import it.unicam.lcp.ludicolo.Utility
import it.unicam.lcp.ludicolo.pkmn.Stat
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.actions.moves.MoveType
import it.unicam.lcp.ludicolo.actions.ActionStatus
import it.unicam.lcp.ludicolo.pkmn.Pokemon
import it.unicam.lcp.ludicolo.pkmn.PokemonStatus
import it.unicam.lcp.ludicolo.actions.items.ItemAction
import it.unicam.lcp.ludicolo.actions.Action
import java.util.HashMap
import java.util.Map
import java.util.Random
import it.unicam.lcp.ludicolo.actions.moves.SideEffectTarget
import it.unicam.lcp.ludicolo.actions.moves.StageSideEffect
import it.unicam.lcp.ludicolo.actions.moves.StatusSideEffect
import java.util.List





rule "AccuracyCheck"
    salience 60
when
    moveAction: MoveAction(moveAction.status == ActionStatus.READYTOFIRE)
    sourcePokemon : Pokemon(sourcePokemon.owner.equals(moveAction.getSource()))
then
    Utility.helper(drools);
    int accuracy = moveAction.getMove().getAccuracy();
    if(!Utility.probabilityCheck(accuracy)) {
        moveAction.setStatus(ActionStatus.DONE);
        System.out.println(sourcePokemon.getName() + " failed to throw its move");
        update(moveAction);
    }
 end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "PhysicalMoveActionFire"
    salience 50
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.PHYSICAL, moveAction.status == ActionStatus.READYTOFIRE)
    sourcePokemon : Pokemon(sourcePokemon.owner.equals(moveAction.getSource()))
    targetPokemon : Pokemon(targetPokemon.owner.equals(moveAction.getTarget()))
then
    Utility.helper(drools);

    Map<Stat, Integer> lifeStageStats = new HashMap<>();
    int targetLife = targetPokemon.getStageValue(Stat.LIFE);
    int dmg = Utility.calculateDamage(
            sourcePokemon.getLevel(),
            moveAction.getMove().getPower(),
            sourcePokemon.getBattleStatValue(Stat.ATTACK),
            targetPokemon.getBattleStatValue(Stat.DEFENSE));
    lifeStageStats.put(Stat.LIFE, Math.max((targetLife - dmg),0));
    System.out.println(sourcePokemon.getName() + " uses " + moveAction.getMove().name() + " against " + targetPokemon.getName());
    System.out.println("DMG: "+dmg);

    targetPokemon.setStage(lifeStageStats);
    update(targetPokemon);

    moveAction.setStatus(ActionStatus.FIRED);
    update(moveAction);
end

rule "SpecialMoveActionFire"
    salience 50
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.SPECIAL, moveAction.status == ActionStatus.READYTOFIRE)
    sourcePokemon : Pokemon(sourcePokemon.owner.equals(moveAction.getSource()))
    targetPokemon : Pokemon(targetPokemon.owner.equals(moveAction.getTarget()))
then
    Utility.helper(drools);

    Map<Stat, Integer> lifeStageStats = new HashMap<>();
    int targetLife = targetPokemon.getStageValue(Stat.LIFE);
    int dmg = Utility.calculateDamage(
            sourcePokemon.getLevel(),
            moveAction.getMove().getPower(),
            sourcePokemon.getBattleStatValue(Stat.SPECIAL_ATTACK),
            targetPokemon.getBattleStatValue(Stat.SPECIAL_DEFENSE));
    System.out.println(sourcePokemon.getName() + " uses " + moveAction.getMove().name() + " against " + targetPokemon.getName());
    System.out.println("DMG: "+dmg);
    lifeStageStats.put(Stat.LIFE, Math.max((targetLife - dmg),0));

    targetPokemon.setStage(lifeStageStats);
    update(targetPokemon);

    moveAction.setStatus(ActionStatus.FIRED);
    update(moveAction);
end

rule "StatusMoveActionFire"
    salience 50
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.STATUS, moveAction.status == ActionStatus.READYTOFIRE)
    sourcePokemon : Pokemon(sourcePokemon.owner.equals(moveAction.getSource()))
    targetPokemon : Pokemon(targetPokemon.owner.equals(moveAction.getTarget()))
then
    Utility.helper(drools);
    System.out.println(sourcePokemon.getName() + " uses " + moveAction.getMove().name() + " against " + targetPokemon.getName());
    moveAction.setStatus(ActionStatus.FIRED);
    update(moveAction);
end

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// TODO: Marco sistemare
/*rule "StageEffect"
    salience 40
when
    moveAction : MoveAction(moveAction.status == ActionStatus.FIRED, moveAction.move.containsStageSideEffect())
    sourcePokemon : Pokemon(sourcePokemon.owner.equals(moveAction.getSource()))
    targetPokemon : Pokemon(targetPokemon.owner.equals(moveAction.getTarget()))
then
    Utility.helper(drools);
    moveAction.getMove().getStageSideEffects().forEach(stageSideEffect -> {
        SideEffectTarget target = stageSideEffect.getTarget();
        Map<Stat, Integer> stages = new HashMap<>();
        stages.put(stageSideEffect.getTargetStat(), stageSideEffect.getNumberOfStages());
        if (target.equals(SideEffectTarget.TARGET)) {
           targetPokemon.setStage(stages);
        } else {
            sourcePokemon.setStage(stages);
        }
    });
    update(targetPokemon);
    update(sourcePokemon);
end*/

rule "MoveEnding"
    salience 39
when
    moveAction : MoveAction(moveAction.status == ActionStatus.FIRED)
then
    moveAction.setStatus(ActionStatus.DONE);
    update(moveAction);
 end

rule "StatusEffect"
    salience 40
when
    moveAction : MoveAction(moveAction.status == ActionStatus.FIRED, moveAction.move.containsStatusSideEffect())
    sourcePokemon : Pokemon(sourcePokemon.owner.equals(moveAction.getSource()))
    targetPokemon : Pokemon(targetPokemon.owner.equals(moveAction.getTarget()))
then
    Utility.helper(drools);
    moveAction.getMove().getStatusSideEffects().forEach(effect -> {
        if(Utility.probabilityCheck(effect.getChance())){
            Pokemon target = effect.getTarget() == SideEffectTarget.SOURCE ? sourcePokemon : effect.getTarget() == SideEffectTarget.TARGET ? targetPokemon : null;
            if(target.getStatus() == null){
                 target.setStatus(effect.getStatus());
                        switch (effect.getStatus()){
                            case PARALYZED:
                                Map<Stat, Integer> battleStats = new HashMap<>();
                                battleStats.put(Stat.SPEED, target.getBattleStatValue(Stat.SPEED)/2);
                                target.setBattleStat(battleStats);
                            case BURNED:
                            case FROZEN:
                            case POISONED:
                            case ASLEEP:
                            case CONFUSED:
                            case PROTECTED:
                                target.setStatusDuration(effect.isRandom() ? new Random().nextInt(effect.getDuration()) + 1 : effect.getDuration());
                                break;
                        }
                System.out.println(target.getName() + " has now a condition: " + target.getStatus() + " for " + target.getStatusDuration() + " turns");
            } else {
                System.out.println(target.getName() + " has already a condition: " + target.getStatus());
            }
        }
    });
        moveAction.setStatus(ActionStatus.DONE);
        update(moveAction);
        update(targetPokemon);
end

