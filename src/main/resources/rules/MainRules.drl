
package rules

//list any import classes here.
import java.util.Comparator
import it.unicam.lcp.ludicolo.*
import it.unicam.lcp.ludicolo.Utility
import it.unicam.lcp.ludicolo.pkmn.Stat
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.actions.ActionStatus
import it.unicam.lcp.ludicolo.actions.ActionStatus
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.pkmn.Stat
import it.unicam.lcp.ludicolo.pkmn.Pokemon
import it.unicam.lcp.ludicolo.actions.items.ItemAction
import it.unicam.lcp.ludicolo.actions.Action
import java.util.HashMap
import java.util.Map
import java.util.ArrayList
import it.unicam.lcp.ludicolo.actions.moves.Move
import java.util.List
import java.util.Random
import it.unicam.lcp.ludicolo.view.App
import it.unicam.lcp.ludicolo.actions.SwapAction


rule "InitiateBattle"
    agenda-group "battle setup"
    salience 1
when
    battle: Battle()
then
    Utility.helper(drools);
    insert(battle.getPlayerOne());
    insert(battle.getPlayerTwo());

    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("turn setup").setFocus();
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("player setup").setFocus();
end

rule "SetupPlayer"
    agenda-group "player setup"
    salience 1
    no-loop true
when
    player: Player(!player.setupDone)
then
    Utility.helper(drools);
    for(Pokemon pkmn : player.getPokemonTeam()){
        Map<Stat, Integer> lifeStats = new HashMap<>();
        lifeStats.put(Stat.LIFE, Utility.calculateBattleLife(pkmn.getBaseStatValue(Stat.LIFE), pkmn.getLevel()));
        pkmn.setBattleStat(lifeStats);
        pkmn.setStage(lifeStats);
    };
    player.setSetupDone(true);
    update(player);

    Pokemon firstPkmn = player.getPokemonTeam().get(0);
    insert(firstPkmn);

    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("pokemon setup").setFocus();
end

rule "SetBattleStats"
    agenda-group "pokemon setup"
    salience 1
when
    pkmn: Pokemon(!pkmn.battleStatsComputed)
    player: Player(player.equals(pkmn.owner))
then
    Utility.helper(drools);

    Map<Stat, Integer> battleStats = new HashMap<>();
    battleStats.put(Stat.ATTACK, Utility.calculateBattleStat(pkmn.getBaseStatValue(Stat.ATTACK), pkmn.getLevel()));
    battleStats.put(Stat.DEFENSE, Utility.calculateBattleStat(pkmn.getBaseStatValue(Stat.DEFENSE), pkmn.getLevel()));
    battleStats.put(Stat.SPECIAL_ATTACK, Utility.calculateBattleStat(pkmn.getBaseStatValue(Stat.SPECIAL_ATTACK), pkmn.getLevel()));
    battleStats.put(Stat.SPECIAL_DEFENSE, Utility.calculateBattleStat(pkmn.getBaseStatValue(Stat.SPECIAL_DEFENSE), pkmn.getLevel()));
    battleStats.put(Stat.SPEED, Utility.calculateBattleStat(pkmn.getBaseStatValue(Stat.SPEED), pkmn.getLevel()));
    pkmn.setBattleStat(battleStats);

    pkmn.setBattleStatsComputed(true);
    update(pkmn);
    App.log(pkmn.getDisplayName() + " is sent out!");
    update(player);
end

 rule "PokemonFaintedMove"
     agenda-group "winning conditions"
     salience 2
     no-loop true
 when
     toRemovePokemon: Pokemon(toRemovePokemon.getStageValue(Stat.LIFE) == 0)
     toRemovePlayer: Player(toRemovePlayer.equals(toRemovePokemon.getOwner()))
     toRemoveAction: Action(toRemoveAction.source == toRemovePlayer)
 then
     Utility.helper(drools);
     retract(toRemoveAction);
  end

rule "PokemonFainted"
    agenda-group "winning conditions"
    salience 3
    no-loop true
when
    toRemovePokemon: Pokemon(toRemovePokemon.getStageValue(Stat.LIFE) == 0)
    anotherPokemon: Pokemon(!anotherPokemon.equals(toRemovePokemon))
    toRemovePlayer: Player(toRemovePlayer.equals(toRemovePokemon.getOwner()))
then
    Utility.helper(drools);

    App.refresh(toRemovePokemon, anotherPokemon);
    App.log(toRemovePokemon.getDisplayName() + " has fainted!");
    update(toRemovePlayer);
 end


rule "PlayerLose"
    agenda-group "winning conditions"
    salience 1
when
     losingPlayer: Player(losingPlayer.areAllFainted())
     winningPlayer: Player(!winningPlayer.equals(losingPlayer))
 then
     Utility.helper(drools);
     App.log(winningPlayer.getName() + " is the winner!");
     App.log(losingPlayer.getName() + " lost this battle!");
     drools.halt();
end


rule "NextPokemonInBattle"
    agenda-group "winning conditions"
    salience 0
when
    toRemovePokemon: Pokemon(toRemovePokemon.getStageValue(Stat.LIFE) == 0)
    toRemovePlayer: Player(toRemovePlayer.equals(toRemovePokemon.getOwner()))
then
     Utility.helper(drools);
     SwapAction swapAction = new SwapAction(toRemovePlayer, 0);
     swapAction.setStatus(ActionStatus.READY_TO_FIRE);
     insert(swapAction);
     kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("action fire").setFocus();
 end


rule "SelectMoves"
    agenda-group "turn setup"
    salience 1
when
    battle: Battle()
    playerOne: Player(playerOne.equals(battle.getPlayerOne()))
    not playerActionOne : Action(playerActionOne.source.equals(playerOne))
    pokemonOne : Pokemon(pokemonOne.owner.equals(playerOne))

    playerTwo: Player(playerTwo.equals(battle.getPlayerTwo()))
    not playerActionTwo : Action(playerActionTwo.source.equals(playerTwo))
    pokemonTwo : Pokemon(pokemonTwo.owner.equals(playerTwo))
then
    Utility.helper(drools);
    App.log("What should " + pokemonOne.getDisplayName() + " do?");
    Action toReturnOne = App.selectMoves(playerOne, playerTwo, pokemonOne).get();
    insert(toReturnOne);

    App.log("What should " + pokemonTwo.getDisplayName() + " do?");
    Action toReturnTwo = App.selectMoves(playerTwo, playerOne, pokemonTwo).get();
    insert(toReturnTwo);
end

rule "TurnStart"
    agenda-group "turn setup"
    salience -1
when
    playerOneMoveAction: Action(playerOneMoveAction.status == ActionStatus.DEFINED)
    playerTwoMoveAction: Action(playerTwoMoveAction.status == ActionStatus.DEFINED,
        playerTwoMoveAction.source != playerOneMoveAction.source)
then
Utility.helper(drools);
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("turn management").setFocus();
end

rule "NewTurn"
    agenda-group "turn setup"
    salience 2
when
    battle: Battle(battle.isNewTurnStart())
    not Action()
    pokemonA : Pokemon()
    pokemonB : Pokemon(!pokemonA.getOwner().equals(pokemonB.getOwner()))
then
    Utility.helper(drools);
    App.refresh(pokemonA, pokemonB);
    App.log("Now the Pokemon must choose new moves");
    battle.setNewTurnStart(false);
    update(battle)
end

rule "TurnEnding"
    agenda-group "turn ending"
    salience -1
when
    battle: Battle(!battle.isNewTurnStart())
then
    Utility.helper(drools);
    battle.setNewTurnStart(true);
    update(battle)
end