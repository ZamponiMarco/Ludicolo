
package rules

//list any import classes here.
import java.util.Comparator
import it.unicam.lcp.ludicolo.*
import it.unicam.lcp.ludicolo.Utility
import it.unicam.lcp.ludicolo.pkmn.Stat
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.actions.ActionStatus
import it.unicam.lcp.ludicolo.actions.ActionStatus
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.pkmn.Stat
import it.unicam.lcp.ludicolo.pkmn.Pokemon
import it.unicam.lcp.ludicolo.actions.items.ItemAction
import it.unicam.lcp.ludicolo.actions.Action
import java.util.HashMap
import java.util.Map
import java.util.ArrayList
import it.unicam.lcp.ludicolo.actions.moves.Move
import java.util.List
import java.util.Random
import it.unicam.lcp.ludicolo.view.App
import it.unicam.lcp.ludicolo.actions.SwapAction


rule "InitiateBattle"
    agenda-group "battle setup"
    salience 1
when
    battle: Battle()
then
    Utility.helper(drools);
    insert(battle.getPlayerOne());
    insert(battle.getPlayerTwo());
    Pokemon pkmnOne = battle.getPlayerOne().getPokemonTeamNotFainted().get(0);
    Pokemon pkmnTwo = battle.getPlayerTwo().getPokemonTeamNotFainted().get(0);
    insert(pkmnOne);
    insert(pkmnTwo);

    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("turn setup").setFocus();
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("pokemon setup").setFocus();
end

rule "SetBattleStats"
    agenda-group "pokemon setup"
    salience 1
when
    pkmn: Pokemon(!pkmn.battleStatsComputed)
    player: Player(player.equals(pkmn.owner))
then
    Utility.helper(drools);

    Map<Stat, Integer> battleStats = new HashMap<>();
    battleStats.put(Stat.ATTACK, Utility.calculateBattleStat(pkmn.getBaseStatValue(Stat.ATTACK), pkmn.getLevel()));
    battleStats.put(Stat.DEFENSE, Utility.calculateBattleStat(pkmn.getBaseStatValue(Stat.DEFENSE), pkmn.getLevel()));
    battleStats.put(Stat.SPECIAL_ATTACK, Utility.calculateBattleStat(pkmn.getBaseStatValue(Stat.SPECIAL_ATTACK), pkmn.getLevel()));
    battleStats.put(Stat.SPECIAL_DEFENSE, Utility.calculateBattleStat(pkmn.getBaseStatValue(Stat.SPECIAL_DEFENSE), pkmn.getLevel()));
    battleStats.put(Stat.SPEED, Utility.calculateBattleStat(pkmn.getBaseStatValue(Stat.SPEED), pkmn.getLevel()));
    pkmn.setBattleStat(battleStats);

    pkmn.setBattleStatsComputed(true);
    update(pkmn);
    App.log(pkmn.getName() + " is sent out!");
    update(player);
end

 rule "PokemonFaintedMove"
     agenda-group "winning conditions"
     salience 2
     no-loop true
 when
     toRemovePokemon: Pokemon(toRemovePokemon.getStageValue(Stat.LIFE) == 0)
     toRemovePlayer: Player(toRemovePlayer.equals(toRemovePokemon.getOwner()))
     toRemoveAction: Action(toRemoveAction.source == toRemovePlayer)
 then
     Utility.helper(drools);
     retract(toRemoveAction);
  end

rule "PokemonFainted"
    agenda-group "winning conditions"
    salience 3
    no-loop true
when
    toRemovePokemon: Pokemon(toRemovePokemon.getStageValue(Stat.LIFE) == 0)
    toRemovePlayer: Player(toRemovePlayer.equals(toRemovePokemon.getOwner()))
then
    Utility.helper(drools);
    App.log(toRemovePokemon.getName() + " has fainted!");
    update(toRemovePlayer);
 end


rule "PlayerLose"
    agenda-group "winning conditions"
    salience 1
when
     losingPlayer: Player(losingPlayer.areAllFainted())
     winningPlayer: Player(!winningPlayer.equals(losingPlayer))
 then
     Utility.helper(drools);
     App.log(winningPlayer.getName() + " is the winner!");
     App.log(losingPlayer.getName() + " lost this battle!");
     drools.halt();
end


rule "NextPokemonInBattle"
    agenda-group "winning conditions"
    salience 0
when
    toRemovePokemon: Pokemon(toRemovePokemon.getStageValue(Stat.LIFE) == 0)
    toRemovePlayer: Player(toRemovePlayer.equals(toRemovePokemon.getOwner()))
then
     Utility.helper(drools);
     SwapAction swapAction = new SwapAction(toRemovePlayer, 0);
     swapAction.setStatus(ActionStatus.READY_TO_FIRE);
     insert(swapAction);
     kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("action fire").setFocus();
 end


rule "SelectMoves"
    agenda-group "turn setup"
    salience 1
when
    player: Player()
    not playerAction : Action(playerAction.source == player)
    target: Player(!target.equals(player))
    pokemon : Pokemon(pokemon.owner.equals(player))
then
    Utility.helper(drools);
    System.out.println("Now moves should be chosen for " + pokemon.getName());
    List<Move> moves = new ArrayList<Move>(pokemon.getLearnedMoves().keySet());
    Move playerOneMove = moves.get(new Random().nextInt(moves.size()));
    Thread.sleep(500);
    insert(new MoveAction(player, playerOneMove, target));
end

rule "TurnStart"
    agenda-group "turn setup"
    salience 0
when
    playerOneMoveAction: Action(playerOneMoveAction.status == ActionStatus.DEFINED)
    playerTwoMoveAction: Action(playerTwoMoveAction.status == ActionStatus.DEFINED,
        playerTwoMoveAction.source != playerOneMoveAction.source)
then
Utility.helper(drools);
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("turn management").setFocus();
end

rule "NewTurn"
    agenda-group "turn ending"
    salience -1
when
    not Action()
    pokemonA : Pokemon()
    pokemonB : Pokemon(!pokemonA.getOwner().equals(pokemonB.getOwner()))
then
    Utility.helper(drools);
    App.refresh(pokemonA, pokemonB);
    System.out.println("Turn has ended: now pokemon must choose new moves");
end