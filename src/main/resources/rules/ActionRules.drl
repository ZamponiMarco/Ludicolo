package rules

import java.util.Comparator
import it.unicam.lcp.ludicolo.pkmn.Pokemon
import it.unicam.lcp.ludicolo.Utility
import it.unicam.lcp.ludicolo.pkmn.Stat
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.actions.ActionStatus
import it.unicam.lcp.ludicolo.actions.items.ItemAction
import it.unicam.lcp.ludicolo.actions.Action

rule "ActionsPriority"
    agenda-group "turn management"
    salience 10
when
    playerOneMoveAction: Action(playerOneMoveAction.status == ActionStatus.DEFINED)
    playerTwoMoveAction: Action(playerTwoMoveAction.status == ActionStatus.DEFINED,
        playerTwoMoveAction.source != playerOneMoveAction.source)
    playerOnePokemon : Pokemon(playerOnePokemon.owner.equals(playerOneMoveAction.getSource()))
    playerTwoPokemon : Pokemon(playerTwoPokemon.owner.equals(playerTwoMoveAction.getSource()))
then
    Utility.helper(drools);
    Action priorityAction;
    int i = playerOneMoveAction.compareTo(playerTwoMoveAction);
    if (i == 0) {
        priorityAction = playerOnePokemon.getBattleStatValueWithStage(Stat.SPEED) > playerTwoPokemon.
            getBattleStatValueWithStage(Stat.SPEED) ? playerOneMoveAction : playerTwoMoveAction;
    } else {
        priorityAction = i > 0 ? playerOneMoveAction : playerTwoMoveAction;
    }
    priorityAction.setStatus(ActionStatus.READY_TO_FIRE);
    update(priorityAction);
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("action fire").setFocus();
end

rule "SetupNextAction"
    agenda-group "turn management"
    salience 5
when
    firstAction : Action(firstAction.status == ActionStatus.DONE)
    secondAction : Action(secondAction.status == ActionStatus.DEFINED)
then
    Utility.helper(drools);
    secondAction.setStatus(ActionStatus.READY_TO_FIRE);
    update(secondAction);
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("action fire").setFocus();
 end

rule "EndAction"
    agenda-group "turn management"
    salience 4
when
    actionDone : Action(actionDone.status == ActionStatus.DONE)
then
    Utility.helper(drools);
    retract(actionDone);
 end

 rule "NoMoreActions"
     agenda-group "turn management"
     salience 6
 when
     not Action()
 then
     Utility.helper(drools);
     System.out.println("There are no actions left: ending the turn");

    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("turn ending").setFocus();
  end
