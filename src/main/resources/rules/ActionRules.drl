package rules

//list any import classes here.
import java.util.Comparator
import it.unicam.lcp.ludicolo.*
import it.unicam.lcp.ludicolo.Utility
import it.unicam.lcp.ludicolo.pkmn.Stat
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.actions.ActionStatus
import it.unicam.lcp.ludicolo.actions.items.ItemAction
import it.unicam.lcp.ludicolo.actions.Action

rule "ItemActionPriority"
    salience 80
when
    itemAction: ItemAction(itemAction.status == ActionStatus.DEFINED)
then
    Utility.helper(drools);
    itemAction.setStatus(ActionStatus.READYTOFIRE);
    update(itemAction);
end

rule "SwapActionPriority"
     salience 80
when
     swapAction: SwapAction(swapAction.status == ActionStatus.DEFINED)
then
Utility.helper(drools);
     swapAction.setStatus(ActionStatus.READYTOFIRE);
     update(swapAction);
end

rule "MoveActionsPriority"
    salience 80
when
    playerOneMoveAction: MoveAction(playerOneMoveAction.status == ActionStatus.DEFINED)
    playerTwoMoveAction: MoveAction(playerTwoMoveAction.status == ActionStatus.DEFINED,
        playerTwoMoveAction.source != playerOneMoveAction.source)
then
    Utility.helper(drools);
    MoveAction priorityAction = Comparator.<MoveAction>comparingInt(action -> action.getMove().getPriority()).
        thenComparingInt(move -> move.getSource().getCurrentPokemon().getBattleStatValue(Stat.SPEED)).
        compare(playerOneMoveAction, playerTwoMoveAction) > 0 ? playerOneMoveAction : playerTwoMoveAction;
    priorityAction.setStatus(ActionStatus.READYTOFIRE);
    update(priorityAction);
end

rule "SetupNextAction"
    salience 31
when
    firstAction : Action(firstAction.status == ActionStatus.FIRED || firstAction.status == ActionStatus.FAILED)
    secondAction : Action(secondAction.status == ActionStatus.DEFINED)
then
    Utility.helper(drools);
    secondAction.setStatus(ActionStatus.READYTOFIRE);
    update(secondAction);
 end

rule "EndAction"
    salience 30
when
    actionDone : Action(actionDone.status == ActionStatus.FIRED || actionDone.status == ActionStatus.FAILED)
then
    Utility.helper(drools);
    retract(actionDone);
 end