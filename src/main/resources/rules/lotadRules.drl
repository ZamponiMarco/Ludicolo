//created on: 8 mar 2021
package rules

//list any import classes here.
import it.unicam.lcp.lotad.*;

function int calculateBattleLife (int baseLife, int level){
    return ((2*baseLife * level)/100) + level + 10;
}

function int calculateBattleStat(int baseStat, int level){
    return Math.round(((2*baseStat * level)/100) + 10);
}

function int calculateDamage(int level, int power, int attack, int defense){
    return Math.round(((((((2*level)/5)+2)*power)*(attack/defense))/50)+2);
}

/*function int multiplier(int stage){
    float fStage = (float) stage;
    return Math.round((1.0 + fStage*(1.0/2.0)));
}*/

rule "SetBattleStats"
salience 90
when
    pkmn: Pokemon(!pkmn.isBattleStats())
then
    Utility.helper(drools);
    pkmn.setBattleLife(calculateBattleLife(pkmn.getBaseLife(), pkmn.getLevel()));

    pkmn.setBattleAttack(calculateBattleStat(pkmn.getBaseAttack(), pkmn.getLevel()));
    pkmn.setBattleDefense(calculateBattleStat(pkmn.getBaseDefense(), pkmn.getLevel()));

    pkmn.setBattleSpeed(calculateBattleStat(pkmn.getBaseSpeed(), pkmn.getLevel()));

    pkmn.setBattleSpecialAttack(calculateBattleStat(pkmn.getBaseSpecialAttack(), pkmn.getLevel()));
    pkmn.setBattleSpecialDefense(calculateBattleStat(pkmn.getBaseSpecialDefense(), pkmn.getLevel()));

    pkmn.setBattleStats(true);
    update(pkmn);

 end

rule "DefineOrder"
when
    battle: Battle(!battle.actionsFired)
    playerOneAction: Action(playerOneAction.source == battle.playerOne, !playerOneAction.readyToFire)
    playerTwoAction: Action(playerTwoAction.source == battle.playerTwo, !playerTwoAction.readyToFire)
then
    Utility.helper(drools);
    if(playerOneAction.getSource().getCurrentPokemon().getBattleSpeed() > playerTwoAction.getSource().getCurrentPokemon().getBattleSpeed()){
        playerOneAction.setReadyToFire(true);
        update(playerOneAction);

        playerTwoAction.setReadyToFire(true);
        update(playerTwoAction);
    }  else {
        playerTwoAction.setReadyToFire(true);
        update(playerTwoAction);

        playerOneAction.setReadyToFire(true);
        update(playerOneAction);
  }

    battle.setActionsFired(true);
    update(battle);
end


rule "PhysicalMove"
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.PHYSICAL, moveAction.readyToFire)
then
    Utility.helper(drools);
    System.out.println("Damage");
    System.out.println(calculateDamage(moveAction.getSource().getCurrentPokemon().getLevel(), moveAction.getMove().getPower(), moveAction.getSource().getCurrentPokemon().getBattleAttack(), moveAction.getTarget().getBattleDefense()));
    moveAction.getTarget().setBattleLife(moveAction.getTarget().getBattleLife() - calculateDamage(moveAction.getSource().getCurrentPokemon().getLevel(), moveAction.getMove().getPower(), moveAction.getSource().getCurrentPokemon().getBattleAttack(), moveAction.getTarget().getBattleDefense()));
    update(moveAction.getTarget())
end

rule "SpecialMove"
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.SPECIAL, moveAction.readyToFire)
then
    Utility.helper(drools);
    System.out.println("Damage");
    System.out.println(calculateDamage(moveAction.getSource().getCurrentPokemon().getLevel(), moveAction.getMove().getPower(), moveAction.getSource().getCurrentPokemon().getBattleSpecialAttack(), moveAction.getTarget().getBattleSpecialDefense()));
    moveAction.getTarget().setBattleLife(moveAction.getTarget().getBattleLife() - calculateDamage(moveAction.getSource().getCurrentPokemon().getLevel(), moveAction.getMove().getPower(), moveAction.getSource().getCurrentPokemon().getBattleSpecialAttack(), moveAction.getTarget().getBattleSpecialDefense()));
    update(moveAction.getTarget())
end