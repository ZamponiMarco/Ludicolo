//created on: 8 mar 2021
package rules

//list any import classes here.
import it.unicam.lcp.lotad.*
import java.util.Comparator
import java.util.Map
import java.util.EnumMap
import java.util.stream.Collectors
import java.util.AbstractMap
import it.unicam.lcp.lotad.Stat
import java.lang.Integer;

function int calculateBattleLife (int baseLife, int level){
    return ((2*baseLife * level)/100) + level + 10;
}

function int calculateBattleStat(int baseStat, int level){
    return Math.round(((2 * baseStat * level)/100.0f) + 10);
}

function int calculateDamage(int level, int power, int attack, int defense){
    return Math.round(((((((2*level)/5.0f)+2)*power)*(attack/defense))/50)+2);
}

/*function int multiplier(int stage){
    float fStage = (float) stage;
    return Math.round((1.0 + fStage*(1.0/2.0)));
}*/

rule "SetBattleStats"
salience 90
when
    pkmn: Pokemon(!pkmn.battleStatsComputed)
then
    Utility.helper(drools);

    Map<Stat, Integer> battleStats = pkmn.getBattleStats();
    battleStats.put(Stat.LIFE, calculateBattleLife(pkmn.getBaseStats().get(Stat.LIFE), pkmn.getLevel()));
    battleStats.put(Stat.ATTACK, calculateBattleStat(pkmn.getBaseStats().get(Stat.ATTACK), pkmn.getLevel()));
    battleStats.put(Stat.DEFENSE, calculateBattleStat(pkmn.getBaseStats().get(Stat.DEFENSE), pkmn.getLevel()));
    battleStats.put(Stat.SPECIAL_ATTACK, calculateBattleStat(pkmn.getBaseStats().get(Stat.SPECIAL_ATTACK), pkmn.getLevel()));
    battleStats.put(Stat.SPECIAL_DEFENSE, calculateBattleStat(pkmn.getBaseStats().get(Stat.SPECIAL_DEFENSE), pkmn.getLevel()));
    battleStats.put(Stat.SPEED, calculateBattleStat(pkmn.getBaseStats().get(Stat.SPEED), pkmn.getLevel()));

    pkmn.setBattleStatsComputed(true);
    update(pkmn);
end


rule "ItemActionPriority"
    salience 80
when
    itemAction: ItemAction(!itemAction.readyToFire, !itemAction.fired)
then
Utility.helper(drools);
    itemAction.setReadyToFire(true);
    update(itemAction);
end

rule "SwapActionPriority"
     salience 80
when
     swapAction: SwapAction(!swapAction.readyToFire, !swapAction.fired)
then
Utility.helper(drools);
     swapAction.setReadyToFire(true);
     update(swapAction);
end

rule "MoveActionsPriority"
    salience 80
when
    playerOneMoveAction: MoveAction(!playerOneMoveAction.readyToFire, !playerOneMoveAction.fired)
    playerTwoMoveAction: MoveAction(!playerTwoMoveAction.readyToFire, !playerTwoMoveAction.fired,
        playerTwoMoveAction.source != playerOneMoveAction.source)
then
    Utility.helper(drools);
    Action priorityAction = Comparator.<MoveAction>comparingInt(move -> move.getSource().getCurrentPokemon().
    getBattleStats().get(Stat.SPEED)).
        compare(playerOneMoveAction, playerTwoMoveAction) > 0 ? playerOneMoveAction : playerTwoMoveAction;
        priorityAction.setReadyToFire(true);
        update(priorityAction);
end

rule "SetupNextAction"
    salience 10
when
    firstAction : Action(firstAction.readyToFire, firstAction.fired)
    secondAction : Action(!secondAction.readyToFire, !secondAction.fired)
then
    Utility.helper(drools);
    secondAction.setReadyToFire(true);
    update(secondAction);
 end

rule "EndAction"
    salience 9
when
    actionDone : Action(actionDone.readyToFire, actionDone.fired)
then
    Utility.helper(drools);
    retract(actionDone);
 end


rule "PhysicalMoveActionFire"
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.PHYSICAL, moveAction.readyToFire, !moveAction.fired)
then
    Utility.helper(drools);

    moveAction.getTarget().getBattleStats().put(Stat.LIFE, moveAction.getTarget().getBattleStats().get(Stat.LIFE) -
        calculateDamage(moveAction.getSource().getCurrentPokemon().getLevel(), moveAction.getMove().getPower(),
        moveAction.getSource().getCurrentPokemon().getBattleStats().get(Stat.ATTACK), moveAction.getTarget().
        getBattleStats().get(Stat.DEFENSE)));

    update(moveAction.getTarget());

    moveAction.setFired(true);
    update(moveAction);
end

rule "SpecialMoveActionFire"
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.SPECIAL, moveAction.readyToFire, !moveAction.fired)
then
    Utility.helper(drools);

    moveAction.getTarget().getBattleStats().put(Stat.LIFE, moveAction.getTarget().getBattleStats().get(Stat.LIFE) -
        calculateDamage(moveAction.getSource().getCurrentPokemon().getLevel(), moveAction.getMove().getPower(),
        moveAction.getSource().getCurrentPokemon().getBattleStats().get(Stat.SPECIAL_ATTACK), moveAction.getTarget().
        getBattleStats().get(Stat.SPECIAL_DEFENSE)));

    update(moveAction.getTarget());

    moveAction.setFired(true);
    update(moveAction);
end

rule "ItemActionFire"

when
    itemAction: ItemAction(itemAction.readyToFire, !itemAction.fired)
then
    Utility.helper(drools);
    System.out.println("Item action fired");

    itemAction.setFired(true);
    update(itemAction)
end

rule "SwapActionFire"

when
    swapAction: SwapAction(swapAction.readyToFire, !swapAction.fired)
then
    Utility.helper(drools);
    System.out.println("Swap action fired");

    swapAction.setFired(true);
    update(swapAction)
end

rule "TurnReady"
when
    not Action()
then
    Utility.helper(drools);
    System.out.println("There are no actions left: ready for the next turn");
 end