//created on: 8 mar 2021
package rules

//list any import classes here.
import it.unicam.lcp.lotad.*;

function int calculateBattleLife (int baseLife, int level){
    return ((2*baseLife * level)/100) + level + 10;
}

function int calculateBattleStat(int baseStat, int level){
    return Math.round(((2*baseStat * level)/100) + 10);
}

function int calculateDamage(int level, int power, int attack, int defense){
    return Math.round(((((((2*level)/5)+2)*power)*(attack/defense))/50)+2);
}

/*function int multiplier(int stage){
    float fStage = (float) stage;
    return Math.round((1.0 + fStage*(1.0/2.0)));
}*/

rule "SetBattleStats"
salience 90
when
    pkmn: Pokemon(!pkmn.isBattleStats())
then
    Utility.helper(drools);
    pkmn.setBattleLife(calculateBattleLife(pkmn.getBaseLife(), pkmn.getLevel()));

    pkmn.setBattleAttack(calculateBattleStat(pkmn.getBaseAttack(), pkmn.getLevel()));
    pkmn.setBattleDefense(calculateBattleStat(pkmn.getBaseDefense(), pkmn.getLevel()));

    pkmn.setBattleSpeed(calculateBattleStat(pkmn.getBaseSpeed(), pkmn.getLevel()));

    pkmn.setBattleSpecialAttack(calculateBattleStat(pkmn.getBaseSpecialAttack(), pkmn.getLevel()));
    pkmn.setBattleSpecialDefense(calculateBattleStat(pkmn.getBaseSpecialDefense(), pkmn.getLevel()));

    pkmn.setBattleStats(true);
    update(pkmn);

 end

rule "DefineOrder"
when
    playerOneAction: Action(!playerOneAction.readyToFire, !playerOneAction.fired)
    playerTwoAction: Action(!playerTwoAction.readyToFire, !playerTwoAction.fired, playerTwoAction.source != playerOneAction.source)
then
    Utility.helper(drools);

    if(playerOneAction.getSource().getCurrentPokemon().getBattleSpeed() > playerTwoAction.getSource().getCurrentPokemon().getBattleSpeed()){

        playerOneAction.setReadyToFire(true);
        update(playerOneAction);
    }  else {
        playerTwoAction.setReadyToFire(true);
        update(playerTwoAction);
  }
end

rule "SetupNextAction"
    salience 10
when
    firstAction : Action(firstAction.readyToFire, firstAction.fired)
    secondAction : Action(!secondAction.readyToFire, !secondAction.fired)
then
    Utility.helper(drools);
    secondAction.setReadyToFire(true);
    update(secondAction);
 end

rule "EndAction"
    salience 9
when
    actionDone : Action(actionDone.readyToFire, actionDone.fired)
then
    Utility.helper(drools);
    retract(actionDone);
 end


rule "PhysicalMove"
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.PHYSICAL, moveAction.readyToFire, !moveAction.fired)
then
    Utility.helper(drools);

    moveAction.getTarget().setBattleLife(moveAction.getTarget().getBattleLife() - calculateDamage(moveAction.getSource().getCurrentPokemon().getLevel(), moveAction.getMove().getPower(), moveAction.getSource().getCurrentPokemon().getBattleAttack(), moveAction.getTarget().getBattleDefense()));

    update(moveAction.getTarget());

        moveAction.setFired(true);
        update(moveAction);
end

rule "SpecialMove"
when
    moveAction: MoveAction(moveAction.move.moveType == MoveType.SPECIAL, moveAction.readyToFire, !moveAction.fired)
then
    Utility.helper(drools);

    moveAction.getTarget().setBattleLife(moveAction.getTarget().getBattleLife() - calculateDamage(moveAction.getSource().getCurrentPokemon().getLevel(), moveAction.getMove().getPower(), moveAction.getSource().getCurrentPokemon().getBattleSpecialAttack(), moveAction.getTarget().getBattleSpecialDefense()));


    update(moveAction.getTarget());

        moveAction.setFired(true);
        update(moveAction);
end

rule "TurnReady"
when
    not Action()
then
    Utility.helper(drools);
    System.out.println("There are no actions left: ready for the next turn");
 end