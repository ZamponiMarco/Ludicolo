
package rules

//list any import classes here.
import java.util.Comparator
import it.unicam.lcp.ludicolo.Utility
import it.unicam.lcp.ludicolo.Player
import it.unicam.lcp.ludicolo.pkmn.Stat
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.actions.moves.MoveType
import it.unicam.lcp.ludicolo.actions.ActionStatus
import it.unicam.lcp.ludicolo.pkmn.Pokemon
import it.unicam.lcp.ludicolo.pkmn.PokemonStatus
import it.unicam.lcp.ludicolo.actions.items.ItemAction
import it.unicam.lcp.ludicolo.actions.Action
import java.util.HashMap
import java.util.Map
import java.util.Random
import it.unicam.lcp.ludicolo.actions.moves.Move
import it.unicam.lcp.ludicolo.actions.moves.MoveType
import it.unicam.lcp.ludicolo.actions.moves.MoveEffectTarget
import it.unicam.lcp.ludicolo.actions.moves.StageMoveEffect
import it.unicam.lcp.ludicolo.actions.moves.StatusMoveEffect
import java.util.List
import java.util.Collections
import it.unicam.lcp.ludicolo.Type
import it.unicam.lcp.ludicolo.view.App

rule "ItemActionFire"
    agenda-group "action fire"
    salience 10
when
    itemAction: ItemAction(itemAction.status == ActionStatus.READY_TO_FIRE)
    pokemon : Pokemon(pokemon.getOwner().equals(itemAction.getSource()))
    player : Player(player.equals(itemAction.getSource()))
then
    Utility.helper(drools);

    App.log(player.getName() + " used: " + itemAction.getItem().getDisplayName() + " for " + pokemon.getDisplayName());
    App.log(itemAction.getItem().getDescription());
    itemAction.setStatus(ActionStatus.FIRED);
    player.consumeItem(itemAction.getItem());
    update(player);
    update(itemAction);
    kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("item action effect").setFocus();
end

rule "HealItemActionFire"
    agenda-group "item action effect"
    salience 1
when
    itemAction: ItemAction(itemAction.status == ActionStatus.FIRED, !itemAction.isHealItemDone(),itemAction.item.containsHealItemEffect())
    pokemon : Pokemon(pokemon.getOwner().equals(itemAction.getSource()))
    opponentPokemon : Pokemon(!opponentPokemon.getOwner().equals(itemAction.getSource()))
then
    Utility.helper(drools);
    itemAction.getItem().getHealItemEffects().forEach(healItemEffect -> {
        Map<Stat, Integer> lifeStats = new HashMap<>();

        int oldLife = pokemon.getStageValue(Stat.LIFE);
        int wholeLife = pokemon.getBattleStatValue(Stat.LIFE);
        if(healItemEffect.isPercentage()){
            int newLifeOne = Math.min(oldLife + wholeLife*healItemEffect.getValue()/100, wholeLife);
            lifeStats.put(Stat.LIFE, newLifeOne);
            System.out.println(oldLife + " -> " + newLifeOne);
        } else {
            int newLifeTwo = Math.min(oldLife + healItemEffect.getValue(), wholeLife);
            lifeStats.put(Stat.LIFE, newLifeTwo);
            System.out.println(oldLife + " -> " + newLifeTwo);
        }
        pokemon.setStage(lifeStats);
    });
    update(pokemon);

    itemAction.setHealItemDone(true);
    update(itemAction);
    App.refresh(pokemon, opponentPokemon);
end

rule "StatusItemActionFire"
    agenda-group "item action effect"
    salience 1
when
    itemAction: ItemAction(itemAction.status == ActionStatus.FIRED, !itemAction.isStatusItemDone(),itemAction.item.containsStatusItemEffect())
    pokemon : Pokemon(pokemon.getOwner().equals(itemAction.getSource()))
    opponentPokemon : Pokemon(!opponentPokemon.getOwner().equals(itemAction.getSource()))
then
    Utility.helper(drools);
    itemAction.getItem().getStatusItemEffects().forEach(statusItemEffect -> {
        if(pokemon.getStatus() != null && pokemon.getStatus().equals(statusItemEffect.getStatus())){
            if(statusItemEffect.getStatus().equals(PokemonStatus.PARALYZED)){
                Map<Stat, Integer> parBattleStats = new HashMap<>();
                parBattleStats.put(Stat.SPEED, Utility.calculateBattleStat(pokemon.getBaseStatValue(Stat.SPEED), pokemon.getLevel()));
                pokemon.setBattleStat(parBattleStats);
            }
            pokemon.setStatus(null);
            pokemon.setStatusDuration(0);
        }
    });
    update(pokemon);
    itemAction.setStatusItemDone(true);
    update(itemAction);
    App.refresh(pokemon, opponentPokemon);
end

rule "RestoreItemActionFire"
    agenda-group "item action effect"
    salience 1
when
    itemAction: ItemAction(itemAction.status == ActionStatus.FIRED, !itemAction.isRestoreItemDone(), itemAction.item.containsRestoreItemEffect())
    pokemon : Pokemon(pokemon.getOwner().equals(itemAction.getSource()))
    opponentPokemon : Pokemon(!opponentPokemon.getOwner().equals(itemAction.getSource()))
then
    Utility.helper(drools);
    itemAction.getItem().getRestoreItemEffects().forEach(statusItemEffect -> {
            pokemon.getLearnedMoves().forEach((move, oldPPValue) -> {
                int wholePPValue = move.getMaxPp();
                if(statusItemEffect.isPercentage()){
                    int newPPOne =  Math.min(oldPPValue + wholePPValue*statusItemEffect.getValue()/100, wholePPValue);
                    pokemon.setPP(move, newPPOne);
                    System.out.println(move.name() + " - " + oldPPValue + " -> " + newPPOne);
                 } else {
                    int newPPTwo =  Math.min(oldPPValue + statusItemEffect.getValue(), wholePPValue);
                    pokemon.setPP(move, newPPTwo);
                    System.out.println(move.name() + " - " + oldPPValue + " -> " + newPPTwo);
                }
            });
    });
    update(pokemon);
    itemAction.setRestoreItemDone(true);
    update(itemAction);
    App.refresh(pokemon, opponentPokemon);
end

rule "ItemEnding"
    agenda-group "item action effect"
    salience 0
when
    itemAction : ItemAction(itemAction.status == ActionStatus.FIRED)
then
    Utility.helper(drools);
    itemAction.setStatus(ActionStatus.DONE);
    update(itemAction);
 end
