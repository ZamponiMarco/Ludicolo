
package rules

//list any import classes here.
import java.util.Comparator
import it.unicam.lcp.ludicolo.*
import it.unicam.lcp.ludicolo.Utility
import it.unicam.lcp.ludicolo.pkmn.Stat
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.actions.ActionStatus
import it.unicam.lcp.ludicolo.actions.ActionStatus
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.actions.moves.MoveAction
import it.unicam.lcp.ludicolo.pkmn.Stat
import it.unicam.lcp.ludicolo.pkmn.Pokemon
import it.unicam.lcp.ludicolo.actions.items.ItemAction
import it.unicam.lcp.ludicolo.actions.Action
import java.util.HashMap
import java.util.Map

function int calculateBattleLife (int baseLife, int level){
    return ((2*baseLife * level)/100) + level + 10;
}

function int calculateBattleStat(int baseStat, int level){
    return Math.round(((2 * baseStat * level)/100.0f) + 10);
}


/*function int multiplier(int stage){
    float fStage = (float) stage;
    return Math.round((1.0 + fStage*(1.0/2.0)));
}*/


rule "SetBattleStats"
salience 100
when
    pkmn: Pokemon(!pkmn.battleStatsComputed)
then
    Utility.helper(drools);

    Map<Stat, Integer> lifeStats = new HashMap<>();
    lifeStats.put(Stat.LIFE, calculateBattleLife(pkmn.getBaseStatValue(Stat.LIFE), pkmn.getLevel()));
    pkmn.setBattleStat(lifeStats);
    pkmn.setStage(lifeStats);

    Map<Stat, Integer> battleStats = new HashMap<>();
    battleStats.put(Stat.ATTACK, calculateBattleStat(pkmn.getBaseStatValue(Stat.ATTACK), pkmn.getLevel()));
    battleStats.put(Stat.DEFENSE, calculateBattleStat(pkmn.getBaseStatValue(Stat.DEFENSE), pkmn.getLevel()));
    battleStats.put(Stat.SPECIAL_ATTACK, calculateBattleStat(pkmn.getBaseStatValue(Stat.SPECIAL_ATTACK), pkmn.getLevel()));
    battleStats.put(Stat.SPECIAL_DEFENSE, calculateBattleStat(pkmn.getBaseStatValue(Stat.SPECIAL_DEFENSE), pkmn.getLevel()));
    battleStats.put(Stat.SPEED, calculateBattleStat(pkmn.getBaseStatValue(Stat.SPEED), pkmn.getLevel()));
    pkmn.setBattleStat(battleStats);

    pkmn.setBattleStatsComputed(true);
    update(pkmn);
end

rule "PokemonFaintedWithMove"
salience 90
when
    toRemove: Pokemon(toRemove.getStageValue(Stat.LIFE) == 0)
    toRemovePlayer: Player(toRemovePlayer.getCurrentPokemon() == toRemove)
    toRemoveAction: Action(toRemoveAction.source == toRemovePlayer)
then
Utility.helper(drools);
    System.out.println(toRemove + "HAS FAINTED");
    toRemovePlayer.addFainted(toRemovePlayer.getCurrentPokemon());
    retract(toRemove);
    retract(toRemoveAction);
 end

rule "PokemonFainted"
salience 89
when
    toRemove: Pokemon(toRemove.getStageValue(Stat.LIFE) == 0)
    toRemovePlayer: Player(toRemovePlayer.getCurrentPokemon() == toRemove)
then
Utility.helper(drools);
    System.out.println(toRemove + "HAS FAINTED");
    toRemovePlayer.addFainted(toRemovePlayer.getCurrentPokemon());
    retract(toRemove);
 end











rule "ItemActionFire"
when
    itemAction: ItemAction(itemAction.status == ActionStatus.READYTOFIRE)
then
    Utility.helper(drools);
    System.out.println("Item action fired");

    itemAction.setStatus(ActionStatus.FIRED);
    update(itemAction)
end

rule "SwapActionFire"

when
    swapAction: SwapAction(swapAction.status == ActionStatus.READYTOFIRE)
then
    Utility.helper(drools);
    System.out.println("Swap action fired");
    swapAction.setStatus(ActionStatus.FIRED);
    update(swapAction)
end

rule "PlayerLose"
    salience 110
when
     losingPlayer: Player(losingPlayer.areAllFainted())
     winningPlayer: Player(!winningPlayer.areAllFainted())
     leftAction: Action()
 then
     Utility.helper(drools);
     retract(leftAction);
end

rule "TurnReady"
    salience 109
when
    not Action()
then
    Utility.helper(drools);
    System.out.println("There are no actions left: ready for the next turn");
 end


